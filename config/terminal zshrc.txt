# Set up the prompt

autoload -Uz promptinit
promptinit
prompt adam1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# Use modern completion system
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

function push(){

cd Documents
cd f
git add .
git commit -m '.'
git push -f e
git push -f l
git push -f a
cd ..

cd resources
git add .
git commit -m '.'
git push -f e
git push -f l
git push -f a
cd ..

cd blogging
git add .
git commit -m '.'
git push -f e
git push -f l
git push -f a
git pull e master
cd ..

cd memories
git add .
git commit -m '.'
git push -f e
git push -f l
git push -f a
git pull e master
cd ..

cd school
git add .
git commit -m '.'
git push -f e
git push -f l
git push -f a
git pull e master
cd ..

cd fonts
git add .
git commit -m '.'
git push -f e
git push -f l
git pull e master
cd ..

cd ..
}

release() {
    file="$1"
    case "$file" in
        *.js)
            terser "$file" -o "${file%.js}.min.js" -c -m
            ;;
        *.html)
            bundled_file="${file%.html}.bundled.html"
            minified_file="${file%.html}.bundled.min.html"

            # Create bundled HTML
            node "$HOME/Documents/f/libraries/bundler.js" "$file" "$bundled_file"

            # Create minified version from the bundled HTML
            html-minifier --remove-comments --minify-css --minify-js \
                --collapse-whitespace --conservative-collapse \
                "$bundled_file" -o "$minified_file"
            ;;
        *)
            echo "Unsupported file type: $file" >&2
            return 1
            ;;
    esac
}

export PATH="$HOME/.local/bin:$PATH"
